ASM
    .equ    READ_CORE_TIMER, 11
    .equ    RESET_CORE_TIMER, 12

    li $v0, RESET_CORE_TIMER
    syscall

    li $v0, READ_CORE_TIMER
    syscall
    blt $v0, 200000, do     #while(readCoreTimer < 200 000)

    .equ    SFR_BASE_HI, 0xBF88
    .equ    TRISE, 0x6100
    .equ    TRISB, 0x6040
    .equ    LATE, 0x6120
    .equ    PORTB, 0x6050

    lui $t0, SFR_BASE_HI
    lw $t1, TRISE($t0)
    andi $t1, $t1, 0xFFFE #andi forÃ§ar bits a 0 == output
    sw $t1, TRISE($t0)
--------------------------------------------------------------------
C

#define MSVAL 20 000

void delay(unsigned int ms)
    unsigned int wait

    resetCoreTimer()
    wait = MSVAL * ms;
    while(readCoreTimer()<wait);


0x87 = 1000 0111 => re6/5/4/3 = 0
LATE = (LATE & 0x87) | (count << 3) -> shift 3 times from 0 to 3 start re3-re6


ff9f => 1111 1111 1001 1111
TRISD = TRISD & 0xFF9F  set port RD5 - RD6 as output


display high (0 = off, 1 = on)
LATDbits.LATD6 = x

display low (0 = off, 1 = on)
LATDbits.LATD5 = x


char digit_high = value >> 4
char digit_low = value & 0x0F


send to display
LATB = LATB & 80FF | display7codes[digit_high]
LATB = LATB & 80FF | display7codes[digit_low]


toBCD
(value/10) << 4 + (value % 10)


print conversion
printInt(ADC1BUF0, 16 | 3 << 16)


toVolts
aux = ((aux*33)+511)/1023